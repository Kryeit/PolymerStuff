plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


repositories {
    maven {
        name = 'Patbox'
        url = 'https://maven.nucleoid.xyz'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Patbox stuff https://pb4.eu
    modImplementation include("eu.pb4:sgui:${project.sgui_version}")
    modImplementation include('eu.pb4:polymer-core:0.5.9+1.20.1')
    modImplementation include('eu.pb4:polymer-autohost:0.5.19+1.20.1')
    modImplementation include('eu.pb4:polymer-resource-pack:0.5.19+1.20.1')
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

loom {
    runs {
        datagen {
            server()
            name = "Data Generation"
            runDir = "build/datagen"
            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
            property "fabric-api.datagen.modid", "polymerstuff"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}

remapJar {
    dependsOn(runDatagen)
    mustRunAfter(runDatagen)
}

tasks.build {
    dependsOn tasks.runDatagen
}